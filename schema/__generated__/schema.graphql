
"""An object with an ID."""
interface Node {
  id: ID!
  id: String!
}


"""GraphClient: A Settled Votes Auction"""
type AuctionSettled implements Node {
  id: String!

  """Winner of auction"""
  winner: String!

  """ID of Votes token *"""
  tokenId: String!
}


"""A connection to a todo."""
type AuctionSettledConnection {

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuctionSettledEdge]
}


"""An edge to a settledAuction."""
type AuctionSettledEdge {

  """The item at the end of the edge."""
  node: AuctionSettled

  """A cursor for use in pagination."""
  cursor: String!
}


"""Information about pagination in a connection."""
type PageInfo {

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {

  """The current time on the server, as a timestamp."""
  currentTime: Float
  questionSubmitteds(skip: Int, first: Int, after: String, before: String, last: Int): QuestionSubmittedConnection
  questionSubmitted(id: String!): QuestionSubmitted

  """Fetches objects given their IDs."""
  nodes(ids: [ID!]!): [Node]!

  """Fetches an object given its ID."""
  node(id: ID!): Node
  auctionSettleds(skip: Int, first: Int, after: String, before: String, last: Int): AuctionSettledConnection
  auctionSettled(id: String!): AuctionSettled
}

type QuestionSubmitted implements Node {
  id: String!

  """ID of the vote token attached to the question. If the community vote is
  used this will be the zero address"""
  tokenId: String!

  """Question asked"""
  question: String!

  """Answer options for the question"""
  options: [String!]!
  answers: [String!]
  answerNum: Int
}


"""A connection to a todo."""
type QuestionSubmittedConnection {

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionSubmittedEdge]
}


"""An edge to a submitted Question."""
type QuestionSubmittedEdge {

  """The item at the end of the edge."""
  node: QuestionSubmitted

  """A cursor for use in pagination."""
  cursor: String!
}

