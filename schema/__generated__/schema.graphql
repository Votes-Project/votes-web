enum OrderBy_AuctionBids {
  id
  tokenId
  blockTimestamp
  amount
}

enum OrderBy_AuctionCreateds {
  id
  tokenId
}

enum OrderBy_AuctionSettleds {
  id
  tokenId
  winner
}

enum OrderBy_Auctions {
  id
  tokenId
  blockTimestamp
  amount
}

enum OrderBy_Transfers {
  id
  tokenId
  winner
  blockNumber
}

enum OrderBy_Votes {
  id
  owner
}

enum OrderDirection {
  asc
  desc
}

enum SubgraphError {
  allow
  deny
}

union Verification = 
  | VerificationData
  | BrightIdError


input Where_AuctionBids {
  id: String
  tokenId: String
}

input Where_AuctionCreateds {
  id: String
  tokenId: String
}

input Where_Auctions {
  id: String
  tokenId: String
}

input Where_Transfers {
  id: String
  tokenId: String
  from: String
}

input Where_Votes {
  id: String
  owner: String
}


"""An object with an ID."""
interface Node {
  id: ID!
}

type Auction implements Node {
  vote: Vote!
  bids(orderBy: OrderBy_AuctionBids, orderDirection: OrderDirection, where: Where_AuctionBids, first: Int, after: String, before: String, last: Int): AuctionBidConnection!
  startTime: String!
  endTime: String!
  amount: String!
  bidder: String
  extended: Boolean!
  settled: Boolean!
  id: ID!
}


"""GraphClient: A bid on a Vote Auction"""
type AuctionBid implements Node {

  """The ID of the Vote Token"""
  tokenId: String!

  """The address of the bidder"""
  bidder: String!

  """The amount of the bid"""
  amount: String!

  """The time the bid was made"""
  blockTimestamp: String!
  id: ID!
}


"""A connection of auction bids."""
type AuctionBidConnection {

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuctionBidEdge]
}


"""An edge to an auction bid."""
type AuctionBidEdge {

  """The item at the end of the edge."""
  node: AuctionBid

  """A cursor for use in pagination."""
  cursor: String!
}


"""A connection to an auction."""
type AuctionConnection {

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuctionEdge]
}


"""GraphClient: A Votes Auction"""
type AuctionCreated implements Node {

  """ID of Votes token *"""
  tokenId: String!

  """Start time of auction *"""
  startTime: String!

  """End time of auction *"""
  endTime: String!
  id: ID!
}


"""A connection to a todo."""
type AuctionCreatedConnection {

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuctionCreatedEdge]
}


"""An edge to an auction."""
type AuctionCreatedEdge {

  """The item at the end of the edge."""
  node: AuctionCreated

  """A cursor for use in pagination."""
  cursor: String!
}


"""An edge to an auction."""
type AuctionEdge {

  """The item at the end of the edge."""
  node: Auction

  """A cursor for use in pagination."""
  cursor: String!
}


"""GraphClient: A Settled Votes Auction"""
type AuctionSettled implements Node {

  """Winner of auction"""
  winner: String!

  """ID of Votes token *"""
  tokenId: String!

  """Amount of winning bid *"""
  amount: String!
  id: ID!
}


"""A connection to a todo."""
type AuctionSettledConnection {

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuctionSettledEdge]
}


"""An edge to a settledAuction."""
type AuctionSettledEdge {

  """The item at the end of the edge."""
  node: AuctionSettled

  """A cursor for use in pagination."""
  cursor: String!
}


"""BrightID Error object"""
type BrightIdError {

  """Returns true if response is an error"""
  error: Boolean!

  """The error number"""
  errorNum: Int!

  """The error message"""
  errorMessage: String!

  """The error code"""
  code: Int!
}


"""Information about pagination in a connection."""
type PageInfo {

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  voteTransfers(skip: Int, orderBy: OrderBy_Transfers, orderDirection: OrderDirection, where: Where_Transfers, first: Int, after: String, before: String, last: Int): VoteTransferConnection
  voteTransfer(id: String!): VoteTransfer
  votes(skip: Int, orderBy: OrderBy_Votes, orderDirection: OrderDirection, where: Where_Votes, first: Int, after: String, before: String, last: Int): VoteConnection!
  vote(id: String!): Vote
  voteContract(id: String!): VoteContract
  verification(contextId: String!): Verification!
  questionSubmitteds(skip: Int, first: Int, after: String, before: String, last: Int): QuestionSubmittedConnection
  questionSubmitted(id: String!): QuestionSubmitted

  """Fetches objects given their IDs."""
  nodes(ids: [ID!]!): [Node]!

  """Fetches an object given its ID."""
  node(id: ID!): Node
  auctionSettleds(skip: Int, orderBy: OrderBy_AuctionSettleds, orderDirection: OrderDirection, first: Int, after: String, before: String, last: Int): AuctionSettledConnection
  auctionSettled(id: String!): AuctionSettled
  auctions(orderBy: OrderBy_Auctions, orderDirection: OrderDirection, where: Where_Auctions, first: Int, after: String, before: String, last: Int): AuctionConnection!
  auction(id: String!): Auction
  auctionCreateds(skip: Int, orderBy: OrderBy_AuctionCreateds, orderDirection: OrderDirection, where: Where_AuctionCreateds, first: Int, after: String, before: String, last: Int): AuctionCreatedConnection
  auctionCreated(id: String!): AuctionCreated
  auctionBids(orderBy: OrderBy_AuctionBids, orderDirection: OrderDirection, where: Where_AuctionBids, first: Int, after: String, before: String, last: Int): AuctionBidConnection
  auctionBid(id: String!): AuctionBid
}

type QuestionSubmitted implements Node {

  """ID of the vote token attached to the question. If the community vote is
  used this will be the zero address"""
  tokenId: String!

  """Question asked"""
  question: String!

  """Answer options for the question"""
  options: [String!]!
  answers: [String!]
  answerNum: Int
  id: ID!
}


"""A connection to a todo."""
type QuestionSubmittedConnection {

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionSubmittedEdge]
}


"""An edge to a submitted Question."""
type QuestionSubmittedEdge {

  """The item at the end of the edge."""
  node: QuestionSubmitted

  """A cursor for use in pagination."""
  cursor: String!
}


"""Data fields from a verified contextID"""
type VerificationData implements Node {

  """the key of app"""
  app: String!

  """The context the contextID is linked to. This should always be Votes"""
  context: String!

  """Bool value denoting whether the BrightID is owned by a unique human"""
  unique: Boolean!

  """Array of ids linked to the Votes context"""
  contextIds: [String!]!

  """The timestamp of the verification"""
  timestamp: Float

  """The signature of the verification"""
  sig: String

  """The public key of the verification"""
  publicKey: String
  id: ID!
}


"""GraphClient: A Vote Token entity"""
type Vote implements Node {
  auction: Auction
  voteContract(id: String!): VoteContract
  tokenId: String!
  owner: String!
  uri: String!
  id: ID!
}


"""A connection of votes ."""
type VoteConnection {

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoteEdge]
}


"""GraphClient: A Vote Contract entity"""
type VoteContract implements Node {
  name: String!
  symbol: String!
  totalSupply: String!
  id: ID!
}


"""An edge to a vote entity."""
type VoteEdge {

  """The item at the end of the edge."""
  node: Vote

  """A cursor for use in pagination."""
  cursor: String!
}


"""GraphClient: A Transfer Event for a Vote token"""
type VoteTransfer implements Node {
  tokenId: String!
  to: String!
  transactionHash: String!
  blockNumber: Int!
  id: ID!
}


"""A connection to a vote transfer."""
type VoteTransferConnection {

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoteTransferEdge]
}


"""An edge to a vote transfer event."""
type VoteTransferEdge {

  """The item at the end of the edge."""
  node: VoteTransfer

  """A cursor for use in pagination."""
  cursor: String!
}

