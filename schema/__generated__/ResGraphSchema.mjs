// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Schema from "../Schema.mjs";
import * as Graphql from "graphql";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as NodeInterfaceResolvers from "../NodeInterfaceResolvers.mjs";
import * as AuctionSettledResolvers from "../AuctionSettledResolvers.mjs";

var typeUnwrapper = (function typeUnwrapper(src) { if (src == null) return null; if (typeof src === 'object' && src.hasOwnProperty('_0')) return src['_0']; return src;});

var i_Node = {
  contents: null
};

var t_AuctionSettled = {
  contents: null
};

var t_AuctionSettledConnection = {
  contents: null
};

var t_AuctionSettledEdge = {
  contents: null
};

var t_PageInfo = {
  contents: null
};

var t_Query = {
  contents: null
};

function interface_Node_resolveType(v) {
  return "AuctionSettled";
}

i_Node.contents = new Graphql.GraphQLInterfaceType({
      name: "Node",
      description: "An object with an ID.",
      fields: (function () {
          return {
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLID)
                  },
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                  }
                };
        }),
      resolveType: interface_Node_resolveType,
      interfaces: []
    });

t_AuctionSettled.contents = new Graphql.GraphQLObjectType({
      name: "AuctionSettled",
      description: "A single todo item.",
      fields: (function () {
          return {
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).id;
                        })
                  },
                  tokenId: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).tokenId;
                        }),
                    description: "ID of Votes token *"
                  },
                  winner: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).winner;
                        }),
                    description: "Winner of auction"
                  }
                };
        }),
      interfaces: [i_Node.contents]
    });

t_AuctionSettledConnection.contents = new Graphql.GraphQLObjectType({
      name: "AuctionSettledConnection",
      description: "A connection to a todo.",
      fields: (function () {
          return {
                  edges: {
                    type: new Graphql.GraphQLList(t_AuctionSettledEdge.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).edges;
                        }),
                    description: "A list of edges."
                  },
                  pageInfo: {
                    type: new Graphql.GraphQLNonNull(t_PageInfo.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).pageInfo;
                        }),
                    description: "Information to aid in pagination."
                  }
                };
        }),
      interfaces: []
    });

t_AuctionSettledEdge.contents = new Graphql.GraphQLObjectType({
      name: "AuctionSettledEdge",
      description: "An edge to a settledAuction.",
      fields: (function () {
          return {
                  cursor: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).cursor;
                        }),
                    description: "A cursor for use in pagination."
                  },
                  node: {
                    type: t_AuctionSettled.contents,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).node;
                        }),
                    description: "The item at the end of the edge."
                  }
                };
        }),
      interfaces: []
    });

t_PageInfo.contents = new Graphql.GraphQLObjectType({
      name: "PageInfo",
      description: "Information about pagination in a connection.",
      fields: (function () {
          return {
                  endCursor: {
                    type: Graphql.GraphQLString,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).endCursor;
                        }),
                    description: "When paginating forwards, the cursor to continue."
                  },
                  hasNextPage: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).hasNextPage;
                        }),
                    description: "When paginating forwards, are there more items?"
                  },
                  hasPreviousPage: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).hasPreviousPage;
                        }),
                    description: "When paginating backwards, are there more items?"
                  },
                  startCursor: {
                    type: Graphql.GraphQLString,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).startCursor;
                        }),
                    description: "When paginating backwards, the cursor to continue."
                  }
                };
        }),
      interfaces: []
    });

t_Query.contents = new Graphql.GraphQLObjectType({
      name: "Query",
      fields: (function () {
          return {
                  auctionSettled: {
                    type: t_AuctionSettled.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return AuctionSettledResolvers.$$Node.auctionSettled(src$1, args.id, ctx);
                        })
                  },
                  auctionSettleds: {
                    type: t_AuctionSettledConnection.contents,
                    args: {
                      after: {
                        type: Graphql.GraphQLString
                      },
                      before: {
                        type: Graphql.GraphQLString
                      },
                      first: {
                        type: Graphql.GraphQLInt
                      },
                      last: {
                        type: Graphql.GraphQLInt
                      },
                      skip: {
                        type: Graphql.GraphQLInt
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return AuctionSettledResolvers.Connection.auctionSettleds(src$1, Caml_option.nullable_to_opt(args.skip), Caml_option.nullable_to_opt(args.first), Caml_option.nullable_to_opt(args.after), Caml_option.nullable_to_opt(args.before), Caml_option.nullable_to_opt(args.last));
                        })
                  },
                  currentTime: {
                    type: Graphql.GraphQLFloat,
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return Schema.currentTime(src$1);
                        }),
                    description: "The current time on the server, as a timestamp."
                  },
                  node: {
                    type: i_Node.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLID)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return NodeInterfaceResolvers.node(src$1, args.id, ctx);
                        }),
                    description: "Fetches an object given its ID."
                  },
                  nodes: {
                    type: new Graphql.GraphQLNonNull(new Graphql.GraphQLList(i_Node.contents)),
                    args: {
                      ids: {
                        type: new Graphql.GraphQLNonNull(new Graphql.GraphQLList(new Graphql.GraphQLNonNull(Graphql.GraphQLID)))
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return NodeInterfaceResolvers.nodes(src$1, args.ids, ctx);
                        }),
                    description: "Fetches objects given their IDs."
                  }
                };
        }),
      interfaces: []
    });

var schema = new Graphql.GraphQLSchema({
      query: t_Query.contents
    });

export {
  schema ,
}
/*  Not a pure module */
