// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Graphql from "graphql";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as VoteResolvers from "../VoteResolvers.mjs";
import * as AuctionResolvers from "../AuctionResolvers.mjs";
import * as AuctionBidResolvers from "../AuctionBidResolvers.mjs";
import * as VerificationResolvers from "../VerificationResolvers.mjs";
import * as VoteContractResolvers from "../VoteContractResolvers.mjs";
import * as VoteTransferResolvers from "../VoteTransferResolvers.mjs";
import * as NodeInterfaceResolvers from "../NodeInterfaceResolvers.mjs";
import * as AuctionCreatedResolvers from "../AuctionCreatedResolvers.mjs";
import * as AuctionSettledResolvers from "../AuctionSettledResolvers.mjs";
import * as QuestionSubmittedResolvers from "../QuestionSubmittedResolvers.mjs";

var typeUnwrapper = (function typeUnwrapper(src) { if (src == null) return null; if (typeof src === 'object' && src.hasOwnProperty('_0')) return src['_0']; return src;});

var applyConversionToInputObject = (function applyConversionToInputObject(obj, instructions) {
      if (instructions.length === 0) return obj;
      let newObj = Object.assign({}, obj);
      instructions.forEach(instruction => {
        let value = newObj[instruction[0]];
         newObj[instruction[0]] = instruction[1](value);
      })
      return newObj;
    });

var enum_OrderBy_AuctionBids = new Graphql.GraphQLEnumType({
      name: "OrderBy_AuctionBids",
      values: {
        id: {
          value: "id"
        },
        tokenId: {
          value: "tokenId"
        },
        blockTimestamp: {
          value: "blockTimestamp"
        },
        amount: {
          value: "amount"
        }
      }
    });

var enum_OrderBy_AuctionCreateds = new Graphql.GraphQLEnumType({
      name: "OrderBy_AuctionCreateds",
      values: {
        id: {
          value: "id"
        },
        tokenId: {
          value: "tokenId"
        }
      }
    });

var enum_OrderBy_AuctionSettleds = new Graphql.GraphQLEnumType({
      name: "OrderBy_AuctionSettleds",
      values: {
        id: {
          value: "id"
        },
        tokenId: {
          value: "tokenId"
        },
        winner: {
          value: "winner"
        }
      }
    });

var enum_OrderBy_Auctions = new Graphql.GraphQLEnumType({
      name: "OrderBy_Auctions",
      values: {
        id: {
          value: "id"
        },
        tokenId: {
          value: "tokenId"
        },
        blockTimestamp: {
          value: "blockTimestamp"
        },
        amount: {
          value: "amount"
        }
      }
    });

var enum_OrderBy_Transfers = new Graphql.GraphQLEnumType({
      name: "OrderBy_Transfers",
      values: {
        id: {
          value: "id"
        },
        tokenId: {
          value: "tokenId"
        },
        winner: {
          value: "winner"
        },
        blockNumber: {
          value: "blockNumber"
        }
      }
    });

var enum_OrderBy_Votes = new Graphql.GraphQLEnumType({
      name: "OrderBy_Votes",
      values: {
        id: {
          value: "id"
        },
        owner: {
          value: "owner"
        }
      }
    });

var enum_OrderDirection = new Graphql.GraphQLEnumType({
      name: "OrderDirection",
      values: {
        asc: {
          value: "asc"
        },
        desc: {
          value: "desc"
        }
      }
    });

new Graphql.GraphQLEnumType({
      name: "SubgraphError",
      values: {
        allow: {
          value: "allow"
        },
        deny: {
          value: "deny"
        }
      }
    });

var i_Node = {
  contents: null
};

var t_Auction = {
  contents: null
};

var t_AuctionBid = {
  contents: null
};

var t_AuctionBidConnection = {
  contents: null
};

var t_AuctionBidEdge = {
  contents: null
};

var t_AuctionConnection = {
  contents: null
};

var t_AuctionCreated = {
  contents: null
};

var t_AuctionCreatedConnection = {
  contents: null
};

var t_AuctionCreatedEdge = {
  contents: null
};

var t_AuctionEdge = {
  contents: null
};

var t_AuctionSettled = {
  contents: null
};

var t_AuctionSettledConnection = {
  contents: null
};

var t_AuctionSettledEdge = {
  contents: null
};

var t_BrightIdError = {
  contents: null
};

var t_PageInfo = {
  contents: null
};

var t_Query = {
  contents: null
};

var t_QuestionSubmitted = {
  contents: null
};

var t_QuestionSubmittedConnection = {
  contents: null
};

var t_QuestionSubmittedEdge = {
  contents: null
};

var t_VerificationData = {
  contents: null
};

var t_Vote = {
  contents: null
};

var t_VoteConnection = {
  contents: null
};

var t_VoteContract = {
  contents: null
};

var t_VoteEdge = {
  contents: null
};

var t_VoteTransfer = {
  contents: null
};

var t_VoteTransferConnection = {
  contents: null
};

var t_VoteTransferEdge = {
  contents: null
};

var input_Where_AuctionBids = {
  contents: null
};

var input_Where_AuctionBids_conversionInstructions = [];

var input_Where_AuctionCreateds = {
  contents: null
};

var input_Where_AuctionCreateds_conversionInstructions = [];

var input_Where_Auctions = {
  contents: null
};

var input_Where_Auctions_conversionInstructions = [];

var input_Where_Transfers = {
  contents: null
};

var input_Where_Transfers_conversionInstructions = [];

var input_Where_Votes = {
  contents: null
};

var input_Where_Votes_conversionInstructions = [];

input_Where_AuctionBids_conversionInstructions.push([
      "id",
      (function (v) {
          if (v == null) {
            return ;
          } else {
            return Caml_option.some(v);
          }
        })
    ], [
      "tokenId",
      (function (v) {
          if (v == null) {
            return ;
          } else {
            return Caml_option.some(v);
          }
        })
    ]);

input_Where_AuctionCreateds_conversionInstructions.push([
      "id",
      (function (v) {
          if (v == null) {
            return ;
          } else {
            return Caml_option.some(v);
          }
        })
    ], [
      "tokenId",
      (function (v) {
          if (v == null) {
            return ;
          } else {
            return Caml_option.some(v);
          }
        })
    ]);

input_Where_Auctions_conversionInstructions.push([
      "id",
      (function (v) {
          if (v == null) {
            return ;
          } else {
            return Caml_option.some(v);
          }
        })
    ], [
      "tokenId",
      (function (v) {
          if (v == null) {
            return ;
          } else {
            return Caml_option.some(v);
          }
        })
    ]);

input_Where_Transfers_conversionInstructions.push([
      "id",
      (function (v) {
          if (v == null) {
            return ;
          } else {
            return Caml_option.some(v);
          }
        })
    ], [
      "tokenId",
      (function (v) {
          if (v == null) {
            return ;
          } else {
            return Caml_option.some(v);
          }
        })
    ], [
      "from",
      (function (v) {
          if (v == null) {
            return ;
          } else {
            return Caml_option.some(v);
          }
        })
    ]);

input_Where_Votes_conversionInstructions.push([
      "id",
      (function (v) {
          if (v == null) {
            return ;
          } else {
            return Caml_option.some(v);
          }
        })
    ], [
      "owner",
      (function (v) {
          if (v == null) {
            return ;
          } else {
            return Caml_option.some(v);
          }
        })
    ]);

var union_Verification = {
  contents: null
};

function union_Verification_resolveType(v) {
  if (v.TAG === "Verification") {
    return "VerificationData";
  } else {
    return "BrightIdError";
  }
}

function interface_Node_resolveType(v) {
  switch (v.TAG) {
    case "Auction" :
        return "Auction";
    case "AuctionBid" :
        return "AuctionBid";
    case "AuctionCreated" :
        return "AuctionCreated";
    case "AuctionSettled" :
        return "AuctionSettled";
    case "QuestionSubmitted" :
        return "QuestionSubmitted";
    case "VerificationData" :
        return "VerificationData";
    case "Vote" :
        return "Vote";
    case "VoteContract" :
        return "VoteContract";
    case "VoteTransfer" :
        return "VoteTransfer";
    
  }
}

i_Node.contents = new Graphql.GraphQLInterfaceType({
      name: "Node",
      description: "An object with an ID.",
      fields: (function () {
          return {
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLID)
                  }
                };
        }),
      resolveType: interface_Node_resolveType,
      interfaces: []
    });

t_Auction.contents = new Graphql.GraphQLObjectType({
      name: "Auction",
      fields: (function () {
          return {
                  amount: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).amount;
                        })
                  },
                  bidder: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).bidder;
                        })
                  },
                  bids: {
                    type: t_AuctionBidConnection.contents,
                    args: {
                      after: {
                        type: Graphql.GraphQLString
                      },
                      before: {
                        type: Graphql.GraphQLString
                      },
                      first: {
                        type: Graphql.GraphQLInt
                      },
                      last: {
                        type: Graphql.GraphQLInt
                      },
                      orderBy: {
                        type: enum_OrderBy_AuctionBids
                      },
                      orderDirection: {
                        type: enum_OrderDirection
                      },
                      where: {
                        type: input_Where_AuctionBids.contents
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          var v = args.where;
                          return AuctionResolvers.bids(src$1, Caml_option.nullable_to_opt(args.orderBy), Caml_option.nullable_to_opt(args.orderDirection), !(v == null) ? applyConversionToInputObject(v, input_Where_AuctionBids_conversionInstructions) : undefined, Caml_option.nullable_to_opt(args.first), Caml_option.nullable_to_opt(args.after), Caml_option.nullable_to_opt(args.before), Caml_option.nullable_to_opt(args.last), ctx);
                        })
                  },
                  endTime: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).endTime;
                        })
                  },
                  extended: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).extended;
                        })
                  },
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLID),
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return NodeInterfaceResolvers.id(src$1, "Auction");
                        })
                  },
                  settled: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).settled;
                        })
                  },
                  startTime: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).startTime;
                        })
                  },
                  tokenId: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).tokenId;
                        })
                  }
                };
        }),
      interfaces: [i_Node.contents]
    });

t_AuctionBid.contents = new Graphql.GraphQLObjectType({
      name: "AuctionBid",
      description: "GraphClient: A bid on a Vote Auction",
      fields: (function () {
          return {
                  amount: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).amount;
                        }),
                    description: "The amount of the bid"
                  },
                  bidder: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).bidder;
                        }),
                    description: "The address of the bidder"
                  },
                  blockTimestamp: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).blockTimestamp;
                        }),
                    description: "The time the bid was made"
                  },
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLID),
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return NodeInterfaceResolvers.id(src$1, "AuctionBid");
                        })
                  },
                  tokenId: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).tokenId;
                        }),
                    description: "The ID of the Vote Token"
                  }
                };
        }),
      interfaces: [i_Node.contents]
    });

t_AuctionBidConnection.contents = new Graphql.GraphQLObjectType({
      name: "AuctionBidConnection",
      description: "A connection of auction bids.",
      fields: (function () {
          return {
                  edges: {
                    type: new Graphql.GraphQLList(t_AuctionBidEdge.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).edges;
                        }),
                    description: "A list of edges."
                  },
                  pageInfo: {
                    type: new Graphql.GraphQLNonNull(t_PageInfo.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).pageInfo;
                        }),
                    description: "Information to aid in pagination."
                  }
                };
        }),
      interfaces: []
    });

t_AuctionBidEdge.contents = new Graphql.GraphQLObjectType({
      name: "AuctionBidEdge",
      description: "An edge to an auction bid.",
      fields: (function () {
          return {
                  cursor: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).cursor;
                        }),
                    description: "A cursor for use in pagination."
                  },
                  node: {
                    type: t_AuctionBid.contents,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).node;
                        }),
                    description: "The item at the end of the edge."
                  }
                };
        }),
      interfaces: []
    });

t_AuctionConnection.contents = new Graphql.GraphQLObjectType({
      name: "AuctionConnection",
      description: "A connection to an auction.",
      fields: (function () {
          return {
                  edges: {
                    type: new Graphql.GraphQLList(t_AuctionEdge.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).edges;
                        }),
                    description: "A list of edges."
                  },
                  pageInfo: {
                    type: new Graphql.GraphQLNonNull(t_PageInfo.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).pageInfo;
                        }),
                    description: "Information to aid in pagination."
                  }
                };
        }),
      interfaces: []
    });

t_AuctionCreated.contents = new Graphql.GraphQLObjectType({
      name: "AuctionCreated",
      description: "GraphClient: A Votes Auction",
      fields: (function () {
          return {
                  endTime: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).endTime;
                        }),
                    description: "End time of auction *"
                  },
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLID),
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return NodeInterfaceResolvers.id(src$1, "AuctionCreated");
                        })
                  },
                  startTime: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).startTime;
                        }),
                    description: "Start time of auction *"
                  },
                  tokenId: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).tokenId;
                        }),
                    description: "ID of Votes token *"
                  }
                };
        }),
      interfaces: [i_Node.contents]
    });

t_AuctionCreatedConnection.contents = new Graphql.GraphQLObjectType({
      name: "AuctionCreatedConnection",
      description: "A connection to a todo.",
      fields: (function () {
          return {
                  edges: {
                    type: new Graphql.GraphQLList(t_AuctionCreatedEdge.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).edges;
                        }),
                    description: "A list of edges."
                  },
                  pageInfo: {
                    type: new Graphql.GraphQLNonNull(t_PageInfo.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).pageInfo;
                        }),
                    description: "Information to aid in pagination."
                  }
                };
        }),
      interfaces: []
    });

t_AuctionCreatedEdge.contents = new Graphql.GraphQLObjectType({
      name: "AuctionCreatedEdge",
      description: "An edge to an auction.",
      fields: (function () {
          return {
                  cursor: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).cursor;
                        }),
                    description: "A cursor for use in pagination."
                  },
                  node: {
                    type: t_AuctionCreated.contents,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).node;
                        }),
                    description: "The item at the end of the edge."
                  }
                };
        }),
      interfaces: []
    });

t_AuctionEdge.contents = new Graphql.GraphQLObjectType({
      name: "AuctionEdge",
      description: "An edge to an auction.",
      fields: (function () {
          return {
                  cursor: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).cursor;
                        }),
                    description: "A cursor for use in pagination."
                  },
                  node: {
                    type: t_Auction.contents,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).node;
                        }),
                    description: "The item at the end of the edge."
                  }
                };
        }),
      interfaces: []
    });

t_AuctionSettled.contents = new Graphql.GraphQLObjectType({
      name: "AuctionSettled",
      description: "GraphClient: A Settled Votes Auction",
      fields: (function () {
          return {
                  amount: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).amount;
                        }),
                    description: "Amount of winning bid *"
                  },
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLID),
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return NodeInterfaceResolvers.id(src$1, "AuctionSettled");
                        })
                  },
                  tokenId: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).tokenId;
                        }),
                    description: "ID of Votes token *"
                  },
                  winner: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).winner;
                        }),
                    description: "Winner of auction"
                  }
                };
        }),
      interfaces: [i_Node.contents]
    });

t_AuctionSettledConnection.contents = new Graphql.GraphQLObjectType({
      name: "AuctionSettledConnection",
      description: "A connection to a todo.",
      fields: (function () {
          return {
                  edges: {
                    type: new Graphql.GraphQLList(t_AuctionSettledEdge.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).edges;
                        }),
                    description: "A list of edges."
                  },
                  pageInfo: {
                    type: new Graphql.GraphQLNonNull(t_PageInfo.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).pageInfo;
                        }),
                    description: "Information to aid in pagination."
                  }
                };
        }),
      interfaces: []
    });

t_AuctionSettledEdge.contents = new Graphql.GraphQLObjectType({
      name: "AuctionSettledEdge",
      description: "An edge to a settledAuction.",
      fields: (function () {
          return {
                  cursor: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).cursor;
                        }),
                    description: "A cursor for use in pagination."
                  },
                  node: {
                    type: t_AuctionSettled.contents,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).node;
                        }),
                    description: "The item at the end of the edge."
                  }
                };
        }),
      interfaces: []
    });

t_BrightIdError.contents = new Graphql.GraphQLObjectType({
      name: "BrightIdError",
      description: "BrightID Error object",
      fields: (function () {
          return {
                  code: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLInt),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).code;
                        }),
                    description: "The error code"
                  },
                  error: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).error;
                        }),
                    description: "Returns true if response is an error"
                  },
                  errorMessage: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).errorMessage;
                        }),
                    description: "The error message"
                  },
                  errorNum: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLInt),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).errorNum;
                        }),
                    description: "The error number"
                  }
                };
        }),
      interfaces: []
    });

t_PageInfo.contents = new Graphql.GraphQLObjectType({
      name: "PageInfo",
      description: "Information about pagination in a connection.",
      fields: (function () {
          return {
                  endCursor: {
                    type: Graphql.GraphQLString,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).endCursor;
                        }),
                    description: "When paginating forwards, the cursor to continue."
                  },
                  hasNextPage: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).hasNextPage;
                        }),
                    description: "When paginating forwards, are there more items?"
                  },
                  hasPreviousPage: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).hasPreviousPage;
                        }),
                    description: "When paginating backwards, are there more items?"
                  },
                  startCursor: {
                    type: Graphql.GraphQLString,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).startCursor;
                        }),
                    description: "When paginating backwards, the cursor to continue."
                  }
                };
        }),
      interfaces: []
    });

t_Query.contents = new Graphql.GraphQLObjectType({
      name: "Query",
      fields: (function () {
          return {
                  auction: {
                    type: t_Auction.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return AuctionResolvers.auction(src$1, args.id, ctx);
                        })
                  },
                  auctionBid: {
                    type: t_AuctionBid.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return AuctionBidResolvers.auctionBid(src$1, args.id, ctx);
                        })
                  },
                  auctionBids: {
                    type: t_AuctionBidConnection.contents,
                    args: {
                      after: {
                        type: Graphql.GraphQLString
                      },
                      before: {
                        type: Graphql.GraphQLString
                      },
                      first: {
                        type: Graphql.GraphQLInt
                      },
                      last: {
                        type: Graphql.GraphQLInt
                      },
                      orderBy: {
                        type: enum_OrderBy_AuctionBids
                      },
                      orderDirection: {
                        type: enum_OrderDirection
                      },
                      where: {
                        type: input_Where_AuctionBids.contents
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          var v = args.where;
                          return AuctionBidResolvers.auctionBids(src$1, Caml_option.nullable_to_opt(args.orderBy), Caml_option.nullable_to_opt(args.orderDirection), !(v == null) ? applyConversionToInputObject(v, input_Where_AuctionBids_conversionInstructions) : undefined, Caml_option.nullable_to_opt(args.first), Caml_option.nullable_to_opt(args.after), Caml_option.nullable_to_opt(args.before), Caml_option.nullable_to_opt(args.last), ctx);
                        })
                  },
                  auctionCreated: {
                    type: t_AuctionCreated.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return AuctionCreatedResolvers.$$Node.auctionCreated(src$1, args.id, ctx);
                        })
                  },
                  auctionCreateds: {
                    type: t_AuctionCreatedConnection.contents,
                    args: {
                      after: {
                        type: Graphql.GraphQLString
                      },
                      before: {
                        type: Graphql.GraphQLString
                      },
                      first: {
                        type: Graphql.GraphQLInt
                      },
                      last: {
                        type: Graphql.GraphQLInt
                      },
                      orderBy: {
                        type: enum_OrderBy_AuctionCreateds
                      },
                      orderDirection: {
                        type: enum_OrderDirection
                      },
                      skip: {
                        type: Graphql.GraphQLInt
                      },
                      where: {
                        type: input_Where_AuctionCreateds.contents
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          var v = args.where;
                          return AuctionCreatedResolvers.Connection.auctionCreateds(src$1, Caml_option.nullable_to_opt(args.skip), Caml_option.nullable_to_opt(args.orderBy), Caml_option.nullable_to_opt(args.orderDirection), !(v == null) ? applyConversionToInputObject(v, input_Where_AuctionCreateds_conversionInstructions) : undefined, Caml_option.nullable_to_opt(args.first), Caml_option.nullable_to_opt(args.after), Caml_option.nullable_to_opt(args.before), Caml_option.nullable_to_opt(args.last));
                        })
                  },
                  auctionSettled: {
                    type: t_AuctionSettled.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return AuctionSettledResolvers.$$Node.auctionSettled(src$1, args.id, ctx);
                        })
                  },
                  auctionSettleds: {
                    type: t_AuctionSettledConnection.contents,
                    args: {
                      after: {
                        type: Graphql.GraphQLString
                      },
                      before: {
                        type: Graphql.GraphQLString
                      },
                      first: {
                        type: Graphql.GraphQLInt
                      },
                      last: {
                        type: Graphql.GraphQLInt
                      },
                      orderBy: {
                        type: enum_OrderBy_AuctionSettleds
                      },
                      orderDirection: {
                        type: enum_OrderDirection
                      },
                      skip: {
                        type: Graphql.GraphQLInt
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return AuctionSettledResolvers.Connection.auctionSettleds(src$1, Caml_option.nullable_to_opt(args.skip), Caml_option.nullable_to_opt(args.orderBy), Caml_option.nullable_to_opt(args.orderDirection), Caml_option.nullable_to_opt(args.first), Caml_option.nullable_to_opt(args.after), Caml_option.nullable_to_opt(args.before), Caml_option.nullable_to_opt(args.last));
                        })
                  },
                  auctions: {
                    type: t_AuctionConnection.contents,
                    args: {
                      after: {
                        type: Graphql.GraphQLString
                      },
                      before: {
                        type: Graphql.GraphQLString
                      },
                      first: {
                        type: Graphql.GraphQLInt
                      },
                      last: {
                        type: Graphql.GraphQLInt
                      },
                      orderBy: {
                        type: enum_OrderBy_Auctions
                      },
                      orderDirection: {
                        type: enum_OrderDirection
                      },
                      where: {
                        type: input_Where_Auctions.contents
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          var v = args.where;
                          return AuctionResolvers.auctions(src$1, Caml_option.nullable_to_opt(args.orderBy), Caml_option.nullable_to_opt(args.orderDirection), !(v == null) ? applyConversionToInputObject(v, input_Where_Auctions_conversionInstructions) : undefined, Caml_option.nullable_to_opt(args.first), Caml_option.nullable_to_opt(args.after), Caml_option.nullable_to_opt(args.before), Caml_option.nullable_to_opt(args.last), ctx);
                        })
                  },
                  node: {
                    type: i_Node.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLID)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return NodeInterfaceResolvers.node(src$1, args.id, ctx);
                        }),
                    description: "Fetches an object given its ID."
                  },
                  nodes: {
                    type: new Graphql.GraphQLNonNull(new Graphql.GraphQLList(i_Node.contents)),
                    args: {
                      ids: {
                        type: new Graphql.GraphQLNonNull(new Graphql.GraphQLList(new Graphql.GraphQLNonNull(Graphql.GraphQLID)))
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return NodeInterfaceResolvers.nodes(src$1, args.ids, ctx);
                        }),
                    description: "Fetches objects given their IDs."
                  },
                  questionSubmitted: {
                    type: t_QuestionSubmitted.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return QuestionSubmittedResolvers.$$Node.questionSubmitted(src$1, args.id, ctx);
                        })
                  },
                  questionSubmitteds: {
                    type: t_QuestionSubmittedConnection.contents,
                    args: {
                      after: {
                        type: Graphql.GraphQLString
                      },
                      before: {
                        type: Graphql.GraphQLString
                      },
                      first: {
                        type: Graphql.GraphQLInt
                      },
                      last: {
                        type: Graphql.GraphQLInt
                      },
                      skip: {
                        type: Graphql.GraphQLInt
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return QuestionSubmittedResolvers.Connection.questionSubmitteds(src$1, Caml_option.nullable_to_opt(args.skip), Caml_option.nullable_to_opt(args.first), Caml_option.nullable_to_opt(args.after), Caml_option.nullable_to_opt(args.before), Caml_option.nullable_to_opt(args.last));
                        })
                  },
                  verification: {
                    type: new Graphql.GraphQLNonNull(union_Verification.contents),
                    args: {
                      contextId: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return VerificationResolvers.verification(src$1, args.contextId, ctx);
                        })
                  },
                  vote: {
                    type: t_Vote.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return VoteResolvers.vote(src$1, args.id, ctx);
                        })
                  },
                  voteContract: {
                    type: t_VoteContract.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return VoteContractResolvers.voteContract(src$1, args.id, ctx);
                        })
                  },
                  voteTransfer: {
                    type: t_VoteTransfer.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return VoteTransferResolvers.$$Node.voteTransfer(src$1, args.id, ctx);
                        })
                  },
                  voteTransfers: {
                    type: t_VoteTransferConnection.contents,
                    args: {
                      after: {
                        type: Graphql.GraphQLString
                      },
                      before: {
                        type: Graphql.GraphQLString
                      },
                      first: {
                        type: Graphql.GraphQLInt
                      },
                      last: {
                        type: Graphql.GraphQLInt
                      },
                      orderBy: {
                        type: enum_OrderBy_Transfers
                      },
                      orderDirection: {
                        type: enum_OrderDirection
                      },
                      skip: {
                        type: Graphql.GraphQLInt
                      },
                      where: {
                        type: input_Where_Transfers.contents
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          var v = args.where;
                          return VoteTransferResolvers.Connection.voteTransfers(src$1, Caml_option.nullable_to_opt(args.skip), Caml_option.nullable_to_opt(args.orderBy), Caml_option.nullable_to_opt(args.orderDirection), !(v == null) ? applyConversionToInputObject(v, input_Where_Transfers_conversionInstructions) : undefined, Caml_option.nullable_to_opt(args.first), Caml_option.nullable_to_opt(args.after), Caml_option.nullable_to_opt(args.before), Caml_option.nullable_to_opt(args.last));
                        })
                  },
                  votes: {
                    type: t_VoteConnection.contents,
                    args: {
                      after: {
                        type: Graphql.GraphQLString
                      },
                      before: {
                        type: Graphql.GraphQLString
                      },
                      first: {
                        type: Graphql.GraphQLInt
                      },
                      last: {
                        type: Graphql.GraphQLInt
                      },
                      orderBy: {
                        type: enum_OrderBy_Votes
                      },
                      orderDirection: {
                        type: enum_OrderDirection
                      },
                      skip: {
                        type: Graphql.GraphQLInt
                      },
                      where: {
                        type: input_Where_Votes.contents
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          var v = args.where;
                          return VoteResolvers.votes(src$1, Caml_option.nullable_to_opt(args.skip), Caml_option.nullable_to_opt(args.orderBy), Caml_option.nullable_to_opt(args.orderDirection), !(v == null) ? applyConversionToInputObject(v, input_Where_Votes_conversionInstructions) : undefined, Caml_option.nullable_to_opt(args.first), Caml_option.nullable_to_opt(args.after), Caml_option.nullable_to_opt(args.before), Caml_option.nullable_to_opt(args.last), ctx);
                        })
                  }
                };
        }),
      interfaces: []
    });

t_QuestionSubmitted.contents = new Graphql.GraphQLObjectType({
      name: "QuestionSubmitted",
      fields: (function () {
          return {
                  answerNum: {
                    type: Graphql.GraphQLInt,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).answerNum;
                        })
                  },
                  answers: {
                    type: new Graphql.GraphQLList(new Graphql.GraphQLNonNull(Graphql.GraphQLString)),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).answers;
                        })
                  },
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLID),
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return NodeInterfaceResolvers.id(src$1, "QuestionSubmitted");
                        })
                  },
                  options: {
                    type: new Graphql.GraphQLNonNull(new Graphql.GraphQLList(new Graphql.GraphQLNonNull(Graphql.GraphQLString))),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).options;
                        }),
                    description: "Answer options for the question"
                  },
                  question: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).question;
                        }),
                    description: "Question asked"
                  },
                  tokenId: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).tokenId;
                        }),
                    description: "ID of the vote token attached to the question. If the community vote is\n  used this will be the zero address"
                  }
                };
        }),
      interfaces: [i_Node.contents]
    });

t_QuestionSubmittedConnection.contents = new Graphql.GraphQLObjectType({
      name: "QuestionSubmittedConnection",
      description: "A connection to a todo.",
      fields: (function () {
          return {
                  edges: {
                    type: new Graphql.GraphQLList(t_QuestionSubmittedEdge.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).edges;
                        }),
                    description: "A list of edges."
                  },
                  pageInfo: {
                    type: new Graphql.GraphQLNonNull(t_PageInfo.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).pageInfo;
                        }),
                    description: "Information to aid in pagination."
                  }
                };
        }),
      interfaces: []
    });

t_QuestionSubmittedEdge.contents = new Graphql.GraphQLObjectType({
      name: "QuestionSubmittedEdge",
      description: "An edge to a submitted Question.",
      fields: (function () {
          return {
                  cursor: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).cursor;
                        }),
                    description: "A cursor for use in pagination."
                  },
                  node: {
                    type: t_QuestionSubmitted.contents,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).node;
                        }),
                    description: "The item at the end of the edge."
                  }
                };
        }),
      interfaces: []
    });

t_VerificationData.contents = new Graphql.GraphQLObjectType({
      name: "VerificationData",
      description: "Data fields from a verified contextID",
      fields: (function () {
          return {
                  app: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).app;
                        }),
                    description: "the key of app"
                  },
                  context: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).context;
                        }),
                    description: "The context the contextID is linked to. This should always be Votes"
                  },
                  contextIds: {
                    type: new Graphql.GraphQLNonNull(new Graphql.GraphQLList(new Graphql.GraphQLNonNull(Graphql.GraphQLString))),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).contextIds;
                        }),
                    description: "Array of ids linked to the Votes context"
                  },
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLID),
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return NodeInterfaceResolvers.id(src$1, "VerificationData");
                        })
                  },
                  publicKey: {
                    type: Graphql.GraphQLString,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).publicKey;
                        }),
                    description: "The public key of the verification"
                  },
                  sig: {
                    type: Graphql.GraphQLString,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).sig;
                        }),
                    description: "The signature of the verification"
                  },
                  timestamp: {
                    type: Graphql.GraphQLFloat,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).timestamp;
                        }),
                    description: "The timestamp of the verification"
                  },
                  unique: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).unique;
                        }),
                    description: "Bool value denoting whether the BrightID is owned by a unique human"
                  }
                };
        }),
      interfaces: [i_Node.contents]
    });

t_Vote.contents = new Graphql.GraphQLObjectType({
      name: "Vote",
      description: "GraphClient: A Vote Token entity",
      fields: (function () {
          return {
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLID),
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return NodeInterfaceResolvers.id(src$1, "Vote");
                        })
                  },
                  owner: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).owner;
                        })
                  },
                  tokenId: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).tokenId;
                        })
                  },
                  uri: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).uri;
                        })
                  },
                  voteContract: {
                    type: t_VoteContract.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return VoteResolvers.VoteContract.voteContract(src$1, args.id, ctx);
                        })
                  }
                };
        }),
      interfaces: [i_Node.contents]
    });

t_VoteConnection.contents = new Graphql.GraphQLObjectType({
      name: "VoteConnection",
      description: "A connection of votes .",
      fields: (function () {
          return {
                  edges: {
                    type: new Graphql.GraphQLList(t_VoteEdge.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).edges;
                        }),
                    description: "A list of edges."
                  },
                  pageInfo: {
                    type: new Graphql.GraphQLNonNull(t_PageInfo.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).pageInfo;
                        }),
                    description: "Information to aid in pagination."
                  }
                };
        }),
      interfaces: []
    });

t_VoteContract.contents = new Graphql.GraphQLObjectType({
      name: "VoteContract",
      description: "GraphClient: A Vote Contract entity",
      fields: (function () {
          return {
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLID),
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return NodeInterfaceResolvers.id(src$1, "VoteContract");
                        })
                  },
                  name: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).name;
                        })
                  },
                  symbol: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).symbol;
                        })
                  },
                  totalSupply: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).totalSupply;
                        })
                  }
                };
        }),
      interfaces: [i_Node.contents]
    });

t_VoteEdge.contents = new Graphql.GraphQLObjectType({
      name: "VoteEdge",
      description: "An edge to a vote entity.",
      fields: (function () {
          return {
                  cursor: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).cursor;
                        }),
                    description: "A cursor for use in pagination."
                  },
                  node: {
                    type: t_Vote.contents,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).node;
                        }),
                    description: "The item at the end of the edge."
                  }
                };
        }),
      interfaces: []
    });

t_VoteTransfer.contents = new Graphql.GraphQLObjectType({
      name: "VoteTransfer",
      description: "GraphClient: A Transfer Event for a Vote token",
      fields: (function () {
          return {
                  blockNumber: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLInt),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).blockNumber;
                        })
                  },
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLID),
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return NodeInterfaceResolvers.id(src$1, "VoteTransfer");
                        })
                  },
                  to: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).to;
                        })
                  },
                  tokenId: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).tokenId;
                        })
                  },
                  transactionHash: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).transactionHash;
                        })
                  }
                };
        }),
      interfaces: [i_Node.contents]
    });

t_VoteTransferConnection.contents = new Graphql.GraphQLObjectType({
      name: "VoteTransferConnection",
      description: "A connection to a vote transfer.",
      fields: (function () {
          return {
                  edges: {
                    type: new Graphql.GraphQLList(t_VoteTransferEdge.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).edges;
                        }),
                    description: "A list of edges."
                  },
                  pageInfo: {
                    type: new Graphql.GraphQLNonNull(t_PageInfo.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).pageInfo;
                        }),
                    description: "Information to aid in pagination."
                  }
                };
        }),
      interfaces: []
    });

t_VoteTransferEdge.contents = new Graphql.GraphQLObjectType({
      name: "VoteTransferEdge",
      description: "An edge to a vote transfer event.",
      fields: (function () {
          return {
                  cursor: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).cursor;
                        }),
                    description: "A cursor for use in pagination."
                  },
                  node: {
                    type: t_VoteTransfer.contents,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).node;
                        }),
                    description: "The item at the end of the edge."
                  }
                };
        }),
      interfaces: []
    });

input_Where_AuctionBids.contents = new Graphql.GraphQLInputObjectType({
      name: "Where_AuctionBids",
      fields: (function () {
          return {
                  id: {
                    type: Graphql.GraphQLString
                  },
                  tokenId: {
                    type: Graphql.GraphQLString
                  }
                };
        })
    });

input_Where_AuctionCreateds.contents = new Graphql.GraphQLInputObjectType({
      name: "Where_AuctionCreateds",
      fields: (function () {
          return {
                  id: {
                    type: Graphql.GraphQLString
                  },
                  tokenId: {
                    type: Graphql.GraphQLString
                  }
                };
        })
    });

input_Where_Auctions.contents = new Graphql.GraphQLInputObjectType({
      name: "Where_Auctions",
      fields: (function () {
          return {
                  id: {
                    type: Graphql.GraphQLString
                  },
                  tokenId: {
                    type: Graphql.GraphQLString
                  }
                };
        })
    });

input_Where_Transfers.contents = new Graphql.GraphQLInputObjectType({
      name: "Where_Transfers",
      fields: (function () {
          return {
                  from: {
                    type: Graphql.GraphQLString
                  },
                  id: {
                    type: Graphql.GraphQLString
                  },
                  tokenId: {
                    type: Graphql.GraphQLString
                  }
                };
        })
    });

input_Where_Votes.contents = new Graphql.GraphQLInputObjectType({
      name: "Where_Votes",
      fields: (function () {
          return {
                  id: {
                    type: Graphql.GraphQLString
                  },
                  owner: {
                    type: Graphql.GraphQLString
                  }
                };
        })
    });

union_Verification.contents = new Graphql.GraphQLUnionType({
      name: "Verification",
      types: (function () {
          return [
                  t_BrightIdError.contents,
                  t_VerificationData.contents
                ];
        }),
      resolveType: union_Verification_resolveType
    });

var schema = new Graphql.GraphQLSchema({
      query: t_Query.contents
    });

export {
  schema ,
}
/* enum_OrderBy_AuctionBids Not a pure module */
