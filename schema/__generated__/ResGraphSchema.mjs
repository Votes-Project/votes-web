// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Graphql from "graphql";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as NodeInterfaceResolvers from "../NodeInterfaceResolvers.mjs";
import * as AuctionCreatedResolvers from "../AuctionCreatedResolvers.mjs";
import * as AuctionSettledResolvers from "../AuctionSettledResolvers.mjs";
import * as QuestionSubmittedResolvers from "../QuestionSubmittedResolvers.mjs";

var typeUnwrapper = (function typeUnwrapper(src) { if (src == null) return null; if (typeof src === 'object' && src.hasOwnProperty('_0')) return src['_0']; return src;});

var applyConversionToInputObject = (function applyConversionToInputObject(obj, instructions) {
      if (instructions.length === 0) return obj;
      let newObj = Object.assign({}, obj);
      instructions.forEach(instruction => {
        let value = newObj[instruction[0]];
         newObj[instruction[0]] = instruction[1](value);
      })
      return newObj;
    });

var enum_OrderBy_AuctionCreateds = new Graphql.GraphQLEnumType({
      name: "OrderBy_AuctionCreateds",
      values: {
        id: {
          value: "id"
        },
        tokenId: {
          value: "tokenId"
        }
      }
    });

var enum_OrderBy_AuctionSettleds = new Graphql.GraphQLEnumType({
      name: "OrderBy_AuctionSettleds",
      values: {
        id: {
          value: "id"
        },
        tokenId: {
          value: "tokenId"
        },
        winner: {
          value: "winner"
        }
      }
    });

var enum_OrderDirection = new Graphql.GraphQLEnumType({
      name: "OrderDirection",
      values: {
        asc: {
          value: "asc"
        },
        desc: {
          value: "desc"
        }
      }
    });

new Graphql.GraphQLEnumType({
      name: "SubgraphError",
      values: {
        allow: {
          value: "allow"
        },
        deny: {
          value: "deny"
        }
      }
    });

var i_Node = {
  contents: null
};

var t_AuctionCreated = {
  contents: null
};

var t_AuctionCreatedConnection = {
  contents: null
};

var t_AuctionCreatedEdge = {
  contents: null
};

var t_AuctionSettled = {
  contents: null
};

var t_AuctionSettledConnection = {
  contents: null
};

var t_AuctionSettledEdge = {
  contents: null
};

var t_PageInfo = {
  contents: null
};

var t_Query = {
  contents: null
};

var t_QuestionSubmitted = {
  contents: null
};

var t_QuestionSubmittedConnection = {
  contents: null
};

var t_QuestionSubmittedEdge = {
  contents: null
};

var input_Where_AuctionCreateds = {
  contents: null
};

var input_Where_AuctionCreateds_conversionInstructions = [];

input_Where_AuctionCreateds_conversionInstructions.push([
      "id",
      (function (v) {
          if (v == null) {
            return ;
          } else {
            return Caml_option.some(v);
          }
        })
    ], [
      "tokenId",
      (function (v) {
          if (v == null) {
            return ;
          } else {
            return Caml_option.some(v);
          }
        })
    ]);

function interface_Node_resolveType(v) {
  switch (v.TAG) {
    case "AuctionCreated" :
        return "AuctionCreated";
    case "AuctionSettled" :
        return "AuctionSettled";
    case "QuestionSubmitted" :
        return "QuestionSubmitted";
    
  }
}

i_Node.contents = new Graphql.GraphQLInterfaceType({
      name: "Node",
      description: "An object with an ID.",
      fields: (function () {
          return {
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLID)
                  },
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                  }
                };
        }),
      resolveType: interface_Node_resolveType,
      interfaces: []
    });

t_AuctionCreated.contents = new Graphql.GraphQLObjectType({
      name: "AuctionCreated",
      description: "GraphClient: A Votes Auction",
      fields: (function () {
          return {
                  endTime: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).endTime;
                        }),
                    description: "End time of auction *"
                  },
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).id;
                        })
                  },
                  startTime: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).startTime;
                        }),
                    description: "Start time of auction *"
                  },
                  tokenId: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).tokenId;
                        }),
                    description: "ID of Votes token *"
                  }
                };
        }),
      interfaces: [i_Node.contents]
    });

t_AuctionCreatedConnection.contents = new Graphql.GraphQLObjectType({
      name: "AuctionCreatedConnection",
      description: "A connection to a todo.",
      fields: (function () {
          return {
                  edges: {
                    type: new Graphql.GraphQLList(t_AuctionCreatedEdge.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).edges;
                        }),
                    description: "A list of edges."
                  },
                  pageInfo: {
                    type: new Graphql.GraphQLNonNull(t_PageInfo.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).pageInfo;
                        }),
                    description: "Information to aid in pagination."
                  }
                };
        }),
      interfaces: []
    });

t_AuctionCreatedEdge.contents = new Graphql.GraphQLObjectType({
      name: "AuctionCreatedEdge",
      description: "An edge to an auction.",
      fields: (function () {
          return {
                  cursor: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).cursor;
                        }),
                    description: "A cursor for use in pagination."
                  },
                  node: {
                    type: t_AuctionCreated.contents,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).node;
                        }),
                    description: "The item at the end of the edge."
                  }
                };
        }),
      interfaces: []
    });

t_AuctionSettled.contents = new Graphql.GraphQLObjectType({
      name: "AuctionSettled",
      description: "GraphClient: A Settled Votes Auction",
      fields: (function () {
          return {
                  amount: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).amount;
                        }),
                    description: "Amount of winning bid *"
                  },
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).id;
                        })
                  },
                  tokenId: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).tokenId;
                        }),
                    description: "ID of Votes token *"
                  },
                  winner: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).winner;
                        }),
                    description: "Winner of auction"
                  }
                };
        }),
      interfaces: [i_Node.contents]
    });

t_AuctionSettledConnection.contents = new Graphql.GraphQLObjectType({
      name: "AuctionSettledConnection",
      description: "A connection to a todo.",
      fields: (function () {
          return {
                  edges: {
                    type: new Graphql.GraphQLList(t_AuctionSettledEdge.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).edges;
                        }),
                    description: "A list of edges."
                  },
                  pageInfo: {
                    type: new Graphql.GraphQLNonNull(t_PageInfo.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).pageInfo;
                        }),
                    description: "Information to aid in pagination."
                  }
                };
        }),
      interfaces: []
    });

t_AuctionSettledEdge.contents = new Graphql.GraphQLObjectType({
      name: "AuctionSettledEdge",
      description: "An edge to a settledAuction.",
      fields: (function () {
          return {
                  cursor: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).cursor;
                        }),
                    description: "A cursor for use in pagination."
                  },
                  node: {
                    type: t_AuctionSettled.contents,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).node;
                        }),
                    description: "The item at the end of the edge."
                  }
                };
        }),
      interfaces: []
    });

t_PageInfo.contents = new Graphql.GraphQLObjectType({
      name: "PageInfo",
      description: "Information about pagination in a connection.",
      fields: (function () {
          return {
                  endCursor: {
                    type: Graphql.GraphQLString,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).endCursor;
                        }),
                    description: "When paginating forwards, the cursor to continue."
                  },
                  hasNextPage: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).hasNextPage;
                        }),
                    description: "When paginating forwards, are there more items?"
                  },
                  hasPreviousPage: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).hasPreviousPage;
                        }),
                    description: "When paginating backwards, are there more items?"
                  },
                  startCursor: {
                    type: Graphql.GraphQLString,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).startCursor;
                        }),
                    description: "When paginating backwards, the cursor to continue."
                  }
                };
        }),
      interfaces: []
    });

t_Query.contents = new Graphql.GraphQLObjectType({
      name: "Query",
      fields: (function () {
          return {
                  auctionCreated: {
                    type: t_AuctionCreated.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return AuctionCreatedResolvers.$$Node.auctionCreated(src$1, args.id, ctx);
                        })
                  },
                  auctionCreateds: {
                    type: t_AuctionCreatedConnection.contents,
                    args: {
                      after: {
                        type: Graphql.GraphQLString
                      },
                      before: {
                        type: Graphql.GraphQLString
                      },
                      first: {
                        type: Graphql.GraphQLInt
                      },
                      last: {
                        type: Graphql.GraphQLInt
                      },
                      orderBy: {
                        type: enum_OrderBy_AuctionCreateds
                      },
                      orderDirection: {
                        type: enum_OrderDirection
                      },
                      skip: {
                        type: Graphql.GraphQLInt
                      },
                      where: {
                        type: input_Where_AuctionCreateds.contents
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          var v = args.where;
                          return AuctionCreatedResolvers.Connection.auctionCreateds(src$1, Caml_option.nullable_to_opt(args.skip), Caml_option.nullable_to_opt(args.orderBy), Caml_option.nullable_to_opt(args.orderDirection), !(v == null) ? applyConversionToInputObject(v, input_Where_AuctionCreateds_conversionInstructions) : undefined, Caml_option.nullable_to_opt(args.first), Caml_option.nullable_to_opt(args.after), Caml_option.nullable_to_opt(args.before), Caml_option.nullable_to_opt(args.last));
                        })
                  },
                  auctionSettled: {
                    type: t_AuctionSettled.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return AuctionSettledResolvers.$$Node.auctionSettled(src$1, args.id, ctx);
                        })
                  },
                  auctionSettleds: {
                    type: t_AuctionSettledConnection.contents,
                    args: {
                      after: {
                        type: Graphql.GraphQLString
                      },
                      before: {
                        type: Graphql.GraphQLString
                      },
                      first: {
                        type: Graphql.GraphQLInt
                      },
                      last: {
                        type: Graphql.GraphQLInt
                      },
                      orderBy: {
                        type: enum_OrderBy_AuctionSettleds
                      },
                      orderDirection: {
                        type: enum_OrderDirection
                      },
                      skip: {
                        type: Graphql.GraphQLInt
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return AuctionSettledResolvers.Connection.auctionSettleds(src$1, Caml_option.nullable_to_opt(args.skip), Caml_option.nullable_to_opt(args.orderBy), Caml_option.nullable_to_opt(args.orderDirection), Caml_option.nullable_to_opt(args.first), Caml_option.nullable_to_opt(args.after), Caml_option.nullable_to_opt(args.before), Caml_option.nullable_to_opt(args.last));
                        })
                  },
                  node: {
                    type: i_Node.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLID)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return NodeInterfaceResolvers.node(src$1, args.id, ctx);
                        }),
                    description: "Fetches an object given its ID."
                  },
                  nodes: {
                    type: new Graphql.GraphQLNonNull(new Graphql.GraphQLList(i_Node.contents)),
                    args: {
                      ids: {
                        type: new Graphql.GraphQLNonNull(new Graphql.GraphQLList(new Graphql.GraphQLNonNull(Graphql.GraphQLID)))
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return NodeInterfaceResolvers.nodes(src$1, args.ids, ctx);
                        }),
                    description: "Fetches objects given their IDs."
                  },
                  questionSubmitted: {
                    type: t_QuestionSubmitted.contents,
                    args: {
                      id: {
                        type: new Graphql.GraphQLNonNull(Graphql.GraphQLString)
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return QuestionSubmittedResolvers.$$Node.questionSubmitted(src$1, args.id, ctx);
                        })
                  },
                  questionSubmitteds: {
                    type: t_QuestionSubmittedConnection.contents,
                    args: {
                      after: {
                        type: Graphql.GraphQLString
                      },
                      before: {
                        type: Graphql.GraphQLString
                      },
                      first: {
                        type: Graphql.GraphQLInt
                      },
                      last: {
                        type: Graphql.GraphQLInt
                      },
                      skip: {
                        type: Graphql.GraphQLInt
                      }
                    },
                    resolve: Caml_option.some(function (src, args, ctx) {
                          var src$1 = typeUnwrapper(src);
                          return QuestionSubmittedResolvers.Connection.questionSubmitteds(src$1, Caml_option.nullable_to_opt(args.skip), Caml_option.nullable_to_opt(args.first), Caml_option.nullable_to_opt(args.after), Caml_option.nullable_to_opt(args.before), Caml_option.nullable_to_opt(args.last));
                        })
                  }
                };
        }),
      interfaces: []
    });

t_QuestionSubmitted.contents = new Graphql.GraphQLObjectType({
      name: "QuestionSubmitted",
      fields: (function () {
          return {
                  answerNum: {
                    type: Graphql.GraphQLInt,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).answerNum;
                        })
                  },
                  answers: {
                    type: new Graphql.GraphQLList(new Graphql.GraphQLNonNull(Graphql.GraphQLString)),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).answers;
                        })
                  },
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).id;
                        })
                  },
                  options: {
                    type: new Graphql.GraphQLNonNull(new Graphql.GraphQLList(new Graphql.GraphQLNonNull(Graphql.GraphQLString))),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).options;
                        }),
                    description: "Answer options for the question"
                  },
                  question: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).question;
                        }),
                    description: "Question asked"
                  },
                  tokenId: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).tokenId;
                        }),
                    description: "ID of the vote token attached to the question. If the community vote is\n  used this will be the zero address"
                  }
                };
        }),
      interfaces: [i_Node.contents]
    });

t_QuestionSubmittedConnection.contents = new Graphql.GraphQLObjectType({
      name: "QuestionSubmittedConnection",
      description: "A connection to a todo.",
      fields: (function () {
          return {
                  edges: {
                    type: new Graphql.GraphQLList(t_QuestionSubmittedEdge.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).edges;
                        }),
                    description: "A list of edges."
                  },
                  pageInfo: {
                    type: new Graphql.GraphQLNonNull(t_PageInfo.contents),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).pageInfo;
                        }),
                    description: "Information to aid in pagination."
                  }
                };
        }),
      interfaces: []
    });

t_QuestionSubmittedEdge.contents = new Graphql.GraphQLObjectType({
      name: "QuestionSubmittedEdge",
      description: "An edge to a submitted Question.",
      fields: (function () {
          return {
                  cursor: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).cursor;
                        }),
                    description: "A cursor for use in pagination."
                  },
                  node: {
                    type: t_QuestionSubmitted.contents,
                    resolve: Caml_option.some(function (src, _args, _ctx) {
                          return typeUnwrapper(src).node;
                        }),
                    description: "The item at the end of the edge."
                  }
                };
        }),
      interfaces: []
    });

input_Where_AuctionCreateds.contents = new Graphql.GraphQLInputObjectType({
      name: "Where_AuctionCreateds",
      fields: (function () {
          return {
                  id: {
                    type: Graphql.GraphQLString
                  },
                  tokenId: {
                    type: Graphql.GraphQLString
                  }
                };
        })
    });

var schema = new Graphql.GraphQLSchema({
      query: t_Query.contents
    });

export {
  schema ,
}
/* enum_OrderBy_AuctionCreateds Not a pure module */
